{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// const DataFrame = () => {\n//   const [context, setContext] = useState(null);\n//   const [posts, setPosts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [updatingPost, setUpdatingPost] = useState(null); // Track which post is being updated\n\n//   useEffect(() => {\n//     // Fetch context and posts data from APIs\n//     const fetchContext = fetch('http://127.0.0.1:8000/api/my_context/').then(response => response.json());\n//     const fetchPosts = fetch('http://127.0.0.1:8000/api/posts/').then(response => response.json());\n\n//     Promise.all([fetchContext, fetchPosts])\n//       .then(([contextData, postsData]) => {\n//         setContext(contextData);\n//         setPosts(postsData.posts);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError(error);\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   const handleDelete = (id) => {\n//     // Simulating deletion (replace with actual deletion logic)\n//     setPosts(posts.filter(post => post.id !== id));\n//   };\n\n//   const handleUpdate = (post) => {\n//     setUpdatingPost(post); // Set the post to be updated\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setUpdatingPost({\n//       ...updatingPost,\n//       [name]: value\n//     });\n//   };\n\n//   const handleSubmitUpdate = () => {\n//     // Simulate update locally (replace with actual update logic)\n//     const updatedPosts = posts.map(post =>\n//       post.id === updatingPost.id ? updatingPost : post\n//     );\n//     setPosts(updatedPosts);\n//     setUpdatingPost(null); // Clear updatingPost state after update\n//   };\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>Error: {error.message}</div>;\n\n//   return (\n//     <div>\n//       <h1>Contact Page</h1>\n//       {context && <p className=\"title\">{context.my_title}</p>}\n//       {Array.isArray(posts) && posts.length > 0 && (\n//         <table className=\"dataframe\">\n//           <thead>\n//             <tr>\n//               <th>Title</th>\n//               <th>Beds</th>\n//               <th>Floor</th>\n//               <th>Image</th>\n//               <th>Furnishing</th>\n//               <th>Super Areas</th>\n//               <th>Area Sqft</th>\n//               <th>Delete</th>\n//               <th>Update</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {posts.map(post => (\n//               <tr key={post.id}>\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\n//                   <input type=\"text\" name=\"name\" value={updatingPost.name} onChange={handleChange} />\n//                 ) : (\n//                   post.name\n//                 )}</td>\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\n//                   <input type=\"text\" name=\"beds\" value={updatingPost.beds} onChange={handleChange} />\n//                 ) : (\n//                   post.beds\n//                 )}</td>\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\n//                   <input type=\"text\" name=\"floor\" value={updatingPost.floor} onChange={handleChange} />\n//                 ) : (\n//                   post.floor\n//                 )}</td>\n//                 <td>\n//                   <img src={post.Image_url} alt={post.name} className=\"image\" />\n//                 </td>\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\n//                   <input type=\"text\" name=\"furnishing\" value={updatingPost.furnishing} onChange={handleChange} />\n//                 ) : (\n//                   post.furnishing\n//                 )}</td>\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\n//                   <input type=\"text\" name=\"super_areas\" value={updatingPost.super_areas} onChange={handleChange} />\n//                 ) : (\n//                   post.super_areas\n//                 )}</td>\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\n//                   <input type=\"text\" name=\"area_sqft\" value={updatingPost.area_sqft} onChange={handleChange} />\n//                 ) : (\n//                   post.area_sqft\n//                 )}</td>\n//                 <td>\n//                   <button type='button' onClick={() => handleDelete(post.id)}>Delete</button>\n//                 </td>\n//                 <td>\n//                   {updatingPost && updatingPost.id === post.id ? (\n//                     <button type=\"button\" onClick={handleSubmitUpdate}>Save</button>\n//                   ) : (\n//                     <button type=\"button\" onClick={() => handleUpdate(post)}>Edit</button>\n//                   )}\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//       {context && context.my_number && (\n//         <ul>\n//           {context.my_number.map((num, index) => (\n//             <li key={index}>{num}</li>\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default DataFrame;","map":{"version":3,"names":[],"sources":["C:/Users/SIDDESH VICHARE/Downloads/Django development/frontend-react/src/DataFrame.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n\r\n// const DataFrame = () => {\r\n//   const [context, setContext] = useState(null);\r\n//   const [posts, setPosts] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [updatingPost, setUpdatingPost] = useState(null); // Track which post is being updated\r\n\r\n//   useEffect(() => {\r\n//     // Fetch context and posts data from APIs\r\n//     const fetchContext = fetch('http://127.0.0.1:8000/api/my_context/').then(response => response.json());\r\n//     const fetchPosts = fetch('http://127.0.0.1:8000/api/posts/').then(response => response.json());\r\n\r\n//     Promise.all([fetchContext, fetchPosts])\r\n//       .then(([contextData, postsData]) => {\r\n//         setContext(contextData);\r\n//         setPosts(postsData.posts);\r\n//         setLoading(false);\r\n//       })\r\n//       .catch(error => {\r\n//         setError(error);\r\n//         setLoading(false);\r\n//       });\r\n//   }, []);\r\n\r\n//   const handleDelete = (id) => {\r\n//     // Simulating deletion (replace with actual deletion logic)\r\n//     setPosts(posts.filter(post => post.id !== id));\r\n//   };\r\n\r\n//   const handleUpdate = (post) => {\r\n//     setUpdatingPost(post); // Set the post to be updated\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setUpdatingPost({\r\n//       ...updatingPost,\r\n//       [name]: value\r\n//     });\r\n//   };\r\n\r\n//   const handleSubmitUpdate = () => {\r\n//     // Simulate update locally (replace with actual update logic)\r\n//     const updatedPosts = posts.map(post =>\r\n//       post.id === updatingPost.id ? updatingPost : post\r\n//     );\r\n//     setPosts(updatedPosts);\r\n//     setUpdatingPost(null); // Clear updatingPost state after update\r\n//   };\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>Error: {error.message}</div>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Contact Page</h1>\r\n//       {context && <p className=\"title\">{context.my_title}</p>}\r\n//       {Array.isArray(posts) && posts.length > 0 && (\r\n//         <table className=\"dataframe\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Title</th>\r\n//               <th>Beds</th>\r\n//               <th>Floor</th>\r\n//               <th>Image</th>\r\n//               <th>Furnishing</th>\r\n//               <th>Super Areas</th>\r\n//               <th>Area Sqft</th>\r\n//               <th>Delete</th>\r\n//               <th>Update</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {posts.map(post => (\r\n//               <tr key={post.id}>\r\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\r\n//                   <input type=\"text\" name=\"name\" value={updatingPost.name} onChange={handleChange} />\r\n//                 ) : (\r\n//                   post.name\r\n//                 )}</td>\r\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\r\n//                   <input type=\"text\" name=\"beds\" value={updatingPost.beds} onChange={handleChange} />\r\n//                 ) : (\r\n//                   post.beds\r\n//                 )}</td>\r\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\r\n//                   <input type=\"text\" name=\"floor\" value={updatingPost.floor} onChange={handleChange} />\r\n//                 ) : (\r\n//                   post.floor\r\n//                 )}</td>\r\n//                 <td>\r\n//                   <img src={post.Image_url} alt={post.name} className=\"image\" />\r\n//                 </td>\r\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\r\n//                   <input type=\"text\" name=\"furnishing\" value={updatingPost.furnishing} onChange={handleChange} />\r\n//                 ) : (\r\n//                   post.furnishing\r\n//                 )}</td>\r\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\r\n//                   <input type=\"text\" name=\"super_areas\" value={updatingPost.super_areas} onChange={handleChange} />\r\n//                 ) : (\r\n//                   post.super_areas\r\n//                 )}</td>\r\n//                 <td>{updatingPost && updatingPost.id === post.id ? (\r\n//                   <input type=\"text\" name=\"area_sqft\" value={updatingPost.area_sqft} onChange={handleChange} />\r\n//                 ) : (\r\n//                   post.area_sqft\r\n//                 )}</td>\r\n//                 <td>\r\n//                   <button type='button' onClick={() => handleDelete(post.id)}>Delete</button>\r\n//                 </td>\r\n//                 <td>\r\n//                   {updatingPost && updatingPost.id === post.id ? (\r\n//                     <button type=\"button\" onClick={handleSubmitUpdate}>Save</button>\r\n//                   ) : (\r\n//                     <button type=\"button\" onClick={() => handleUpdate(post)}>Edit</button>\r\n//                   )}\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//       {context && context.my_number && (\r\n//         <ul>\r\n//           {context.my_number.map((num, index) => (\r\n//             <li key={index}>{num}</li>\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DataFrame;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}